import { useState, useEffect } from "react";
import Image from "next/image";
import StepContent from "./StepContent";
import StepTitle from "./StepTitle";
import IntersectionObserver from "./IntersectionObserver";
import RightWord from "./RightWord";
import WrongWord from "./WrongWord";
import ParagraphText from "./ParagraphText";
import {
  animate,
  useMotionValue,
  AnimatePresence,
  motion,
  useSpring,
} from "framer-motion";

export default function Scrollytelling() {
  const [step, setStep] = useState(0);
  const imageTranslateY = useSpring(0, {
    stiffness: 60,
    damping: 10,
    mass: 0.5,
    ease: "easeOut",
  });

  useEffect(() => {
    console.log("step changed to", step);
    if (step === 0) {
      //   imageTranslateY.set(0);
    }
    if (step === 1) {
      //   imageTranslateY.set(-20);
    }
  }, [step]);

  return (
    <>
      <h1 className="fixed top-0">Current step: {step}</h1>
      {/* Scrollytelling section. */}
      <div className="flex flex-col justify-center items-center">
        {/* Fixed image */}
        <div className="sticky top-0 z-1 h-screen w-screen flex flex-col justify-center items-center">
          <motion.div style={{ y: imageTranslateY }} layout>
            <div
              className="rounded-md overflow-hidden"
              style={{ boxShadow: "1px 1px 20px black" }}
            >
              <Image
                src="/images/mona.jpg"
                alt="Mona Lisa"
                width={500}
                height={500}
              />
            </div>
          </motion.div>
          <AnimatePresence>
            {step >= 1 && (
              // FIXME: not animating on exit
              <motion.p
                layout
                className="mt-3 text-gray-500 font-light text-md max-w-[500px] text-left leading-snug
                absolute bottom-[50px] left-[50%] transform -translate-x-1/2"
                initial={{ opacity: 0 }}
                animate={{ opacity: 1 }}
                exit={{ opacity: 0 }}
                transition={{ delay: 0.5 }}
              >
                <RightWord step={step}>
                  a close up of a painting of a woman
                </RightWord>
                , <RightWord step={step}>painting of mona lisa</RightWord>,{" "}
                <RightWord step={step}>leonardo da vinci painting</RightWord>,{" "}
                <RightWord step={step}>artist leonardo davinci</RightWord>,{" "}
                <RightWord step={step}>mona lisa</RightWord>,{" "}
                <WrongWord step={step}>
                  cave painting of the mona lisa
                </WrongWord>
                , <RightWord step={step}>monalisa</RightWord>,{" "}
                <WrongWord step={step}>cave painting of mona lisa</WrongWord>,{" "}
                <RightWord step={step}>by Leonardo da Vinci</RightWord>,{" "}
                <RightWord step={step}>restored painting</RightWord>,{" "}
                <WrongWord step={step}>mona lisa with a mustache</WrongWord>,{" "}
                <RightWord step={step}>da vinci painting</RightWord>,{" "}
                <RightWord step={step}>((the mona lisa))</RightWord>,{" "}
                <RightWord step={step}>mona lisa as a real person</RightWord>
              </motion.p>
            )}
          </AnimatePresence>
        </div>
        {/* Scrollytelling text */}
        <div className="flex flex-col justify-center items-center z-10">
          <div className="h-[80vh]">
            <IntersectionObserver onIntersect={() => setStep(0)}>
              {/* Step content */}
              <StepContent centered>
                <StepTitle>This is an image.</StepTitle>
                <ParagraphText>
                  You may recognize it as the "Mona Lisa."
                </ParagraphText>
              </StepContent>
            </IntersectionObserver>
          </div>
          <div className="h-[80vh]">
            <IntersectionObserver onIntersect={() => setStep(1)}>
              <StepContent>
                <ParagraphText>
                  For a human, recognizing this image is a simple task. But how
                  does a computer recognize the Mona Lisa?
                </ParagraphText>
                <ParagraphText>
                  Consider the text output below, which was generated by ___, a
                  machine learning model that was trained to recognize images.
                </ParagraphText>
              </StepContent>
            </IntersectionObserver>
          </div>
          <div className="h-[80vh]">
            <IntersectionObserver onIntersect={() => setStep(2)}>
              <StepContent>
                <ParagraphText>
                  There are some things that the computer can see, like the fact
                  that this is a close up painting. It also knows, thanks to its
                  training, that this is in fact a famous painting of Mona Lisa.
                </ParagraphText>
                <ParagraphText>
                  But there are some things the model{" "}
                  <span className="font-bold text-red-700">gets wrong</span>,
                  like its assumption that this painting took place in a cave.
                </ParagraphText>
              </StepContent>
            </IntersectionObserver>
          </div>
          <div className="h-[80vh]">
            <IntersectionObserver onIntersect={() => setStep(2)}>
              <StepContent>
                <ParagraphText>
                  Regardless of its quirks, this text output tells us a lot
                  about{" "}
                  <span className="font-bold">how a computer thinks.</span> We
                  can notice common phrases, and the elements that a computer
                  thinks are important.
                </ParagraphText>
                <ParagraphText>
                  Learning the language of computers is a good first step to a
                  new and growing field of work:{" "}
                  <span className="font-bold">prompt engineering.</span>
                </ParagraphText>
              </StepContent>
            </IntersectionObserver>
          </div>
        </div>
      </div>
    </>
  );
}
